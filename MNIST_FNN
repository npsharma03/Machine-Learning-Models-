
import torch.nn as nn 
import torch.optim as optim 
from torchvision import datasets, transforms 
from torch.utils.data import DataLoader

transform = transforms.Compose([
    transforms.ToTensor(), 
    transforms.Normalize((0.5,), (0.5,))
])


train_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.MNIST(root='./data', train=False, download=True, transform=transform) 

train_loader = DataLoader(dataset = train_dataset, batch_size = 64, shuffle = True, num_workers = 2)
test_loader = DataLoader(dataset = test_dataset, batch_size = 64, shuffle = False, num_workers = 2)  

class FNN(nn.Module): 
    def __init__(self): 
        super(FNN, self).__init__() 
        self.fc1 = nn.Linear(28 * 28, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10) 
    
    def forward(self, x): 
        x = x.view(-1, 28 * 28) 
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x)) 
        x = self.fc3(x) 
        return x  
    
model = FNN()      

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr = 0.001) 

num_epochs = 5 

for epoch in range(num_epochs): 
    for image, labels in train_loader: 
        optimizer.zero_grad()
        output = model(image) 
        loss = criterion(output, labels) 
        loss.backward() 
        optimizer.step()  
        
    print(f'Epoch[{epoch + 1}/{num_epochs}, Loss: {loss.item():.4f}')


correct = 0 
total = 0 
with torch.no_grad(): 
    for images, labels in test_loader: 
        output = model(images) 
        _, predicted = torch.max(output.data, 1) 
        total += labels.size(0) 
        correct += (predicted == labels).sum().item()
        
    print(f'Test Accuracy: {correct * 100/ total}%')
import torch 
import torch.nn as nn 
import torch.optim as optim 
from torchvision import datasets, transforms 
from torch.utils.data import DataLoader 

transform = transforms.Compose([
    transforms.ToTensor(), 
    transforms.Normalize((0.5,), (0.5,))
])


train_dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.MNIST(root='./data', train=False, download=True, transform=transform) 

train_loader = DataLoader(dataset = train_dataset, batch_size = 64, shuffle = True, num_workers = 2)
test_loader = DataLoader(dataset = test_dataset, batch_size = 64, shuffle = False, num_workers = 2)  

class FNN(nn.Module): 
    def __init__(self): 
        super(FNN, self).__init__() 
        self.fc1 = nn.Linear(28 * 28, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10) 
    
    def forward(self, x): 
        x = x.view(-1, 28 * 28) 
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x)) 
        x = self.fc3(x) 
        return x  
    
model = FNN()  

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr = 0.001) 

num_epochs = 5 

for epoch in range(num_epochs): 
    for image, labels in train_loader: 
        optimizer.zero_grad()
        output = model(image) 
        loss = criterion(output, labels) 
        loss.backward() 
        optimizer.step()  
        
    print(f'Epoch[{epoch + 1}/{num_epochs}, Loss: {loss.item():.4f}')

correct = 0 
total = 0 
with torch.no_grad(): 
    for images, labels in test_loader: 
        output = model(images) 
        _, predicted = torch.max(output.data, 1) 
        total += labels.size(0) 
        correct += (predicted == labels).sum().item()
        
    print(f'Test Accuracy: {correct * 100/ total}%') 
